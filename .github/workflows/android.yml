name: Android Qt CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  QT_VERSION: "5.15.2"
  QT_ARCH: "android_arm64_v8a"
  ANDROID_API: 31
  NDK_VERSION: "25.1.8937393"
  BUILD_TOOLS: "34.0.0"
  GRADLE_VERSION: "8.0"

jobs:
  android-build:
    name: Build APK
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
    # ========== 代码检出 ==========
    - name: Checkout code
      uses: actions/checkout@v4

    # ========== 双JDK环境 ==========
    - name: Setup JDK 11 (for Android tools)
      uses: actions/setup-java@v3
      id: jdk11
      with:
        distribution: "temurin"
        java-version: "11"
        cache: "gradle"

    - name: Setup JDK 17 (for project)
      uses: actions/setup-java@v3
      id: jdk17
      with:
        distribution: "temurin"
        java-version: "17"
        cache: "gradle"

    # ========== Android环境配置 ==========
    - name: Install Android SDK
      uses: android-actions/setup-android@v3
      with:
        api-level: ${{ env.ANDROID_API }}
        build-tools: ${{ env.BUILD_TOOLS }}

    - name: Fix JAXB dependencies
      run: |
        # 强制使用JDK11
        echo "JAVA_HOME=${{ steps.jdk11.outputs.path }}" >> $GITHUB_ENV
        echo "Using Java: $(java -version 2>&1 | head -n 1)"

        # 下载JAXB依赖
        mkdir -p $ANDROID_HOME/tools/lib/jaxb
        wget -P $ANDROID_HOME/tools/lib/jaxb \
          https://repo1.maven.org/maven2/javax/xml/bind/jaxb-api/2.3.1/jaxb-api-2.3.1.jar \
          https://repo1.maven.org/maven2/com/sun/xml/bind/jaxb-core/2.3.0.1/jaxb-core-2.3.0.1.jar \
          https://repo1.maven.org/maven2/com/sun/xml/bind/jaxb-impl/2.3.3/jaxb-impl-2.3.3.jar

        # 修改sdkmanager脚本
        SDK_MANAGER="$ANDROID_HOME/tools/bin/sdkmanager"
        sed -i '2i\JAVA_OPTS="$JAVA_OPTS -classpath $ANDROID_HOME/tools/lib/jaxb/*"' $SDK_MANAGER
        chmod +x $SDK_MANAGER

    - name: Install NDK
      run: |
        yes | $ANDROID_HOME/tools/bin/sdkmanager "ndk;${{ env.NDK_VERSION }}"
        echo "ANDROID_NDK_ROOT=$ANDROID_HOME/ndk/${{ env.NDK_VERSION }}" >> $GITHUB_ENV

        # 恢复项目JDK
        echo "JAVA_HOME=${{ steps.jdk17.outputs.path }}" >> $GITHUB_ENV

    # ========== Qt安装 ==========
    - name: Install Qt
      run: |
        sudo apt-get install -y libxcb-xinerama0
        pip install aqtinstall
        aqt install-qt linux android ${{ env.QT_VERSION }} ${{ env.QT_ARCH }} \
          --modules qtbase,qtmqtt,qtsvg,qtandroidextras \
          --autodesktop \
          --outputdir Qt
        
        echo "QT_DIR=$GITHUB_WORKSPACE/Qt/${{ env.QT_VERSION }}/${{ env.QT_ARCH }}" >> $GITHUB_ENV
        echo "PATH=$QT_DIR/bin:$PATH" >> $GITHUB_ENV

    # ========== 构建配置 ==========
    - name: Configure build
      run: |
        ln -sf $ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64 \
               $ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux
        
        sed -i "s/gradle-[0-9\.]*-all.zip/gradle-${{ env.GRADLE_VERSION }}-all.zip/g" gradle/wrapper/gradle-wrapper.properties

    # ========== 构建流程 ==========
    - name: Build APK
      run: |
        qmake -spec android-clang CONFIG+=release
        make -j$(nproc)
        make apk_install_target
        
        cd android-build
        chmod +x gradlew
        ./gradlew assembleRelease \
          -Pandroid.injected.signing.store.file=../android.keystore \
          -Pandroid.injected.signing.store.password=${{ secrets.KEYSTORE_PASSWORD }} \
          -Pandroid.injected.signing.key.alias=${{ secrets.KEY_ALIAS }} \
          -Pandroid.injected.signing.key.password=${{ secrets.KEY_PASSWORD }} \
          --no-daemon \
          --stacktrace

    # ========== 产物上传 ==========
    - name: Upload APK
      uses: actions/upload-artifact@v4
      with:
        name: android-release
        path: android-build/build/outputs/apk/release/*.apk
        retention-days: 7
