name: Windows Android Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  QT_VERSION: 5.15.2
  QT_ARCH: android_arm64_v8a
  ANDROID_API: 31
  NDK_VERSION: 25.1.8937393
  BUILD_TOOLS: 34.0.0

jobs:
  build:
    name: Build APK
    runs-on: windows-latest
    timeout-minutes: 60

    steps:
    # ========== 检出代码 ==========
    - name: Checkout code
      uses: actions/checkout@v4

    # ========== 安装必要依赖 ==========
    - name: Install dependencies
      shell: powershell
      run: |
        # 安装 Chocolatey 包管理器
        Set-ExecutionPolicy Bypass -Scope Process -Force
        [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
        iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
        
        # 安装必要组件
        choco install -y python --version=3.10.11
        choco install -y jdk17
        choco install -y 7zip

    # ========== 配置 Android 环境 ==========
    - name: Setup Android
      shell: powershell
      run: |
        # 下载 Android Command Line Tools
        $url = "https://dl.google.com/android/repository/commandlinetools-win-9477386_latest.zip"
        $output = "$env:RUNNER_TEMP\cmdline-tools.zip"
        Invoke-WebRequest -Uri $url -OutFile $output
        
        # 解压到指定位置
        Expand-Archive -Path $output -DestinationPath "$env:ANDROID_SDK_ROOT\cmdline-tools\latest"
        
        # 设置环境变量
        echo "ANDROID_SDK_ROOT=$env:ANDROID_SDK_ROOT" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        echo "ANDROID_HOME=$env:ANDROID_SDK_ROOT" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        echo "PATH=$env:ANDROID_SDK_ROOT\cmdline-tools\latest\bin;$env:ANDROID_SDK_ROOT\platform-tools;$env:PATH" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

    # ========== 安装 Android 组件 ==========
    - name: Install Android components
      shell: powershell
      run: |
        # 接受许可证
        echo y | sdkmanager --licenses
        
        # 安装必要组件
        sdkmanager "platform-tools" "platforms;android-$env:ANDROID_API" "build-tools;$env:BUILD_TOOLS" "ndk;$env:NDK_VERSION"
        
        # 设置 NDK 路径
        echo "ANDROID_NDK_ROOT=$env:ANDROID_SDK_ROOT\ndk\$env:NDK_VERSION" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

    # ========== 安装 Qt ==========
    - name: Install Qt
      shell: powershell
      run: |
        # 安装 aqtinstall
        python -m pip install aqtinstall
        
        # 安装 Qt for Android
        aqt install-qt windows android $env:QT_VERSION $env:QT_ARCH `
          -m "qtcharts qtmqtt qtquick3d" `
          --autodesktop `
          --outputdir Qt
        
        # 设置环境变量
        $qtPath = "$pwd\Qt\$env:QT_VERSION\$env:QT_ARCH"
        echo "QT_DIR=$qtPath" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        echo "PATH=$qtPath\bin;$env:PATH" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

    # ========== 配置构建环境 ==========
    - name: Configure build
      shell: powershell
      run: |
        # 生成 qmake 配置
        $qtConf = @"[Paths]
        Prefix = $env:QT_DIR
        HostPrefix = $env:QT_DIR\..\..\Tools\QtCreator
        Sysroot = $env:ANDROID_NDK_ROOT\toolchains\llvm\prebuilt\windows-x86_64\sysroot
        "@
        Set-Content -Path "$env:QT_DIR\bin\qt.conf" -Value $qtConf

    # ========== 构建项目 ==========
    - name: Build project
      shell: powershell
      run: |
        # 生成 Makefile
        qmake -spec android-clang `
          "ANDROID_ABIS=arm64-v8a" `
          "ANDROID_MIN_SDK_VERSION=23" `
          "ANDROID_TARGET_SDK_VERSION=$env:ANDROID_API" `
          CONFIG+=release
        
        # 编译项目
        jom /J 2 || nmake
        
        # 生成 APK 包
        nmake apk_install_target

    # ========== 生成签名 APK ==========
    - name: Build APK
      shell: powershell
      working-directory: android-build
      run: |
        # 生成 APK
        & "$env:QT_DIR\bin\androiddeployqt" `
          --input android-deployment-settings.json `
          --output . `
          --gradle `
          --verbose
        
        # 签名 APK
        .\gradlew.bat assembleRelease `
          -Pandroid.injected.signing.store.file=../android.keystore `
          -Pandroid.injected.signing.store.password=$env:KEYSTORE_PASSWORD `
          -Pandroid.injected.signing.key.alias=$env:KEY_ALIAS `
          -Pandroid.injected.signing.key.password=$env:KEY_PASSWORD `
          --no-daemon `
          --stacktrace

    # ========== 上传产物 ==========
    - name: Upload APK
      uses: actions/upload-artifact@v4
      with:
        name: android-release
        path: android-build\build\outputs\apk\release\*.apk
